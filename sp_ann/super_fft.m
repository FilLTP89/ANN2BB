function [varargout]=super_fft(varargin)
    %===============
    % Fourier tranform
    % Editor: Filippo Gatti
    % CentraleSupÃ©lec - Laboratoire MSSMat
    % Politecnico di Milano - DICA
    % Copyright 2014-15
    % NOTES
    % super_fft: function to evaluate:
    %  - Fourier Spectrum (Amplitude and Phase),
    %  - Power Spectral Density
    %  - Main Period of input signal
    % INPUT:  dt (sampling time step)
    %         acc (input signal)
    %         K0_smooth (flag for Konno-Ohmachi smoothing (K0_smooth=1) or not (K0_smooth=0))
    %         N_FFT (number of points for FFT computation (optional))
    % OUTPUT: f (frequency column vector)
    %         AMP (FFT amplitude column vector)
    %         PH (FFT phase column vector)
    %         PYY (Power Spectral Density column vector)
    %         Tm (FFT Main Period evaluated between fcut_low and fcut_high)
    %===============
    %======================================================================
    % SET-UP
    %======================================================================
    %----------------------------------------------------------------------
    % time step
    %----------------------------------------------------------------------
    dt=varargin{1};
    %----------------------------------------------------------------------
    %----------------------------------------------------------------------
    % acceleration
    %----------------------------------------------------------------------
    acc=varargin{2}(:);
    %----------------------------------------------------------------------
    %----------------------------------------------------------------------
    % Konno-Ohmachi Smoothing
    %----------------------------------------------------------------------
    KO_smooth = varargin{3};
    %======================================================================
    %======================================================================
    % FREQUENCY VECTOR
    %======================================================================
    %----------------------------------------------------------------------
    % NFFT definition
    %----------------------------------------------------------------------
    if nargin>3
        N_FFT=varargin{4};
    else
        N_FFT=2^nextpow2(numel(acc))+1;
    end
    % N.B.: N_FFT should be odd number to be able to transpose the
    % conjugate part
    %----------------------------------------------------------------------
    %----------------------------------------------------------------------
    % frequency vector
    %----------------------------------------------------------------------
    df=1/dt/(N_FFT-1);     f=(0:N_FFT-1)*df;    f = f(:);
    %======================================================================
    %======================================================================
    % FOURIER RESPONSE
    %======================================================================
    %----------------------------------------------------------------------
    % fft complete response
    %----------------------------------------------------------------------
    %afft=fft(acc,N_FFT)./numel(acc);
    afft=fft(acc,N_FFT).*dt;
    % size(afft)=N_FFT (odd)
    %----------------------------------------------------------------------
    %----------------------------------------------------------------------
    % amplitude of fft response
    %----------------------------------------------------------------------
    AMP=abs(afft);
    % Konno-Ohmachi smoothing
    if KO_smooth                                                            
        AMP=smooth_KO(AMP,40);
    end
    AMP = AMP(:);
    %----------------------------------------------------------------------
    %----------------------------------------------------------------------
    % phase angle of fft (to be unwrapped)
    %----------------------------------------------------------------------
    PH=angle(afft);
    %----------------------------------------------------------------------
    %----------------------------------------------------------------------
    % Power Spectral Density
    %----------------------------------------------------------------------
    PYY=(afft).*(conj(afft))/N_FFT;
    %======================================================================
    %======================================================================
    % MAIN PERIOD
    %======================================================================
    idx0=find(f>=.1,1,'first');
    idx1=find(f<=40,1,'last');
    Tm1 = sum(AMP(idx0:idx1).^2./f(idx0:idx1));
    Tm2 = sum(AMP(idx0:idx1).^2);
    %======================================================================    
    varargout{1}=f(:);
    varargout{2}=AMP(:);
    varargout{3}=PH(:);
    varargout{4}=afft(:);
    varargout{5}=PYY(:);
    varargout{6}=Tm1/Tm2;
    return
end
